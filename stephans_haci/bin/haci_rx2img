#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of the Haeberlie-Algorithm for CI detection package
# (HACI) developed within the satellite group at TROPOS.
#
# HACI is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors/Contacts
# -Stephan Lenk (lenk@tropos.de)
# -Hartwig Deneke (deneke@tropos.de)

import numpy as np
from scipy.misc import imsave
import argparse
import datetime
import os, sys, os.path
import haci as hci

def str2date(s):
    return datetime.datetime.strptime(s,"%Y-%m-%d").date()

def get_args():
    argp = argparse.ArgumentParser(description='Generate images from RADOLAN RX HDCP2 files.')
    argp.add_argument( '-d', '--date', type=str2date, help='Date, specified as YYYY-MM-DD string' )
    argp.add_argument( 'ifile', nargs='*', metavar='IFILE', help='one or more RADOlAN RX HDCP2 files' )
    argp.add_argument( '-r', '--range', nargs=2, type=int, default=[0,288], help='Time range, specified as time steps from 0...288')
    argp.add_argument( '-F', '--img-format', metavar='IMG_FMT', type=str, default='rx-dbz-{dt:%Y%m%d}-{n:03d}.png', help='Format for image file names')
    args = argp.parse_args()
    if len(args.ifile)==0:
        if args.date is None:
            print "either date or ifile argument has to be specified.\n"
            argp.print_usage()
            exit(1)
        else:
            root = os.getenv('RADOLAN_RX_HDCP2_ROOT','/vols/talos/datasets/radolan/rx_hdcp2/')
            path_fmt = '{root}/{dt:%Y}/hdfd_miub_drnet00_l3_dbz_v00_{dt:%Y%m%d}000000.nc'
            args.ifile.append(path_fmt.format(root=root,dt=args.date))
    return args

if __name__ == '__main__':

    # get commandline arguments
    args = get_args()
    for ifile in args.ifile:
        # loop over input files
        rx = hci.read_rx_hdcp2(ifile)
        for i in xrange(*args.range):
            # loop over time steps and generate images
            dt = datetime.datetime.utcfromtimestamp(np.timedelta64(rx.time.values[i]-np.datetime64(0,'s'),'s').astype(float))
            p = { 'dt': dt,'n':i}
            fname = args.img_format.format(**p)
            dir = os.path.dirname(fname)
            if dir!='' and not os.path.isdir(dir):
                os.makedirs(dir)
            img = hci.dbz2rgb(rx.dbz[i,:,:])
            imsave(fname,img)
    exit(1)
        


