#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of the Haeberlie-Algorithm for CI detection package
# (HACI) developed within the satellite group at TROPOS.
#
# HACI is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors/Contacts
# -Stephan Lenk (lenk@tropos.de)
# -Hartwig Deneke (deneke@tropos.de)

import numpy as np
import argparse
import datetime
import os, os.path, sys
import haci as hci
from haci import data_io as hdio

def str2date(s):
    return datetime.datetime.strptime(s,"%Y-%m-%d").date()

def get_args():
    rx_root = os.getenv('RADOLAN_RX_HDCP2_ROOT','/vols/satellite/datasets/ground/radolan/rx_hdcp2/')
    rx_path_fmt = '{root}/{dt:%Y}/hdfd_miub_drnet00_l3_dbz_v00_{dt:%Y%m%d}000000.nc'
    argp = argparse.ArgumentParser(description='Detect convective initation events in RADOLAN RX HDCP2 data.')
    argp.add_argument( '-d', '--date', default=None, type=str2date, help='Date, specified as YYYY-MM-DD string' )
    argp.add_argument('ifile',nargs='*',help='one or multiple RADOlAN RX HDCP2 files')
    argp.add_argument('-b','--buffer', type=int, default=15, help='Buffer radius')
    argp.add_argument('-t','--threshold', type=float, default=35.0, help='Detection threshold [in dBz]')
    argp.add_argument('-o','--ofile-fmt', metavar='OFILE_FMT', default='haci-{dt:%Y-%m-%d}-bbox.dat',help='Format string for output filename')
    argp.add_argument('-R','--rx-dir', metavar='RX_DIR', default=rx_root,help='Root dir for RADOLAN RX HDCP2 files')
    #argp.add_argument('-n','--ntstep',type=int,default=5,help='Number of time steps to connect')
    args = argp.parse_args()
    if len(args.ifile)==0 and args.date is None:
        print("ERROR: either date or ifile argument has to be specified.\n")
        argp.print_usage()
        exit(1)
    if args.date is not None:
        args.ifile.append(rx_path_fmt.format(root=args.rx_dir,dt=args.date))
    return args

def write_objprops(fname,objprops):
    hdr_fmt = ' '.join(['{'+str(i)+':>'+str(w)+'}' for i,w in enumerate([10,5,6,6]+[3]*10)] )    
    cols = list(objprops.columns)
    cols.insert(0,'date')
    hdr = hdr_fmt.format(*cols)
    fmt = '{time:%Y-%m-%d %H:%M} {id:06d} {flags:06x} '+' '.join( ['{'+c+':3d}' for c in list(objprops.columns)[3:]] )
    hdio.write_table(fname,objprops,fmt,header=hdr)
    return

if __name__ == '__main__':
    # get commandline arguments
    args = get_args()
    # loop over input files
    for ifile in args.ifile:
        print('Reading RX input data')
        rx = hdio.read_rx_hdcp2(ifile)
        print('Detecting CI events')
        objprops = hci.detect_ci(rx,thresh=args.threshold,radius=args.buffer)#,nstep=args.ntstep)
        # Write objects to output file
        dt = datetime.datetime.utcfromtimestamp(np.timedelta64(rx.time.values[0]-np.datetime64(0,'s'),'s').astype(float))
        ofile = args.ofile_fmt.format(**{'dt':dt})
        dir = os.path.dirname(ofile)
        if dir!='' and not os.path.isdir(dir):
            os.makedirs(dir)
        write_objprops(ofile,objprops)
    exit(0)


